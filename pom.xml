<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<groupId>de.conterra.devnet</groupId>
	<artifactId>mapapps-url-query</artifactId>
	<version>1.0.0</version>
	<packaging>jar</packaging>
	
	<name>URL Query</name>
	<url>https://developernetwork.conterra.de</url>
	<inceptionYear>2017</inceptionYear>
	<organization>
		<name>con terra - Gesellschaft fuer Angewandte Informationstechnologie mbH</name>
		<url>https://www.conterra.de</url>
	</organization>
	
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		
		<!-- JS lib versions -->
		<mapapps.version>3.7.0</mapapps.version>
		
		<!-- java lib versions -->
		<ct.jsregistry.version>1.0.26</ct.jsregistry.version>
		<ct.jsrt-test.version>1.0.7</ct.jsrt-test.version>
		
		<!-- plugin versions -->
		<plugin.license.version>1.8</plugin.license.version>
		<plugin.resources.version>3.0.2</plugin.resources.version>
		<plugin.source.version>3.0.1</plugin.source.version>
		<plugin.jar.version>3.0.2</plugin.jar.version>
		<plugin.jetty.version>9.4.0.v20161208</plugin.jetty.version>
		<plugin.properties.version>1.0.0</plugin.properties.version>
		<plugin.replacer.version>1.5.3</plugin.replacer.version>
		<plugin.assembly.version>3.0.0</plugin.assembly.version>
		<plugin.release.version>2.5.3</plugin.release.version>
		<plugin.githubrelease.version>1.1.1</plugin.githubrelease.version>
		<plugin.scm.version>1.9.5</plugin.scm.version>
		
		<!-- dojo custom build parameters -->
		<js.build.outputPath>${project.build.directory}/${project.artifactId}/js</js.build.outputPath>
		
		
		<!-- don't do this in production configuration! This allows to go any http traffic over the /proxy endpoint -->
		<proxy.allowedServerUrls>
			http,*;
		</proxy.allowedServerUrls>
		<proxy.allowedSSLDNs>*</proxy.allowedSSLDNs>
		
		<!-- the default app, replaced in the *.html files to switch app names-->
		<default.app.name>sample</default.app.name>
		<client.config.initjs>$\{mapapps.remote.base\}/resources/jsregistry/root/ct/${mapapps.version}/dojo-init.js</client.config.initjs>
		
		<!-- required for release build -->
		<scm.push>false</scm.push>
		<scm.username>${env.USER_NAME}</scm.username>
		<scm.password>${env.USER_PW}</scm.password>
	</properties>
	
	<repositories>
		<repository>
			<id>52n-dependencies</id>
			<name>52n-dependencies</name>
			<url>http://52north.org/maven/repo/releases</url>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>52n-dependencies</id>
			<name>52n-dependencies</name>
			<url>http://52north.org/maven/repo/releases</url>
		</pluginRepository>
	</pluginRepositories>
	
	<dependencyManagement>
		<dependencies>
			<dependency>
				<!-- import dependencies management from mapapps -->
				<groupId>de.conterra.mapapps</groupId>
				<artifactId>ct-mapapps</artifactId>
				<version>${mapapps.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<!-- proxy required if wms or other services should be loaded -->
		<dependency>
			<groupId>de.conterra.mapapps</groupId>
			<artifactId>ct-mapapps-proxy</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- the embedded registry provides a fast way to host the js packages-->
		<dependency>
			<groupId>de.conterra.jsregistry</groupId>
			<artifactId>ct-jsregistry-embedded</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- use intern-geezer as test lib -->
		<dependency>
			<groupId>de.conterra.jsrt</groupId>
			<artifactId>ct-jsrt-test-intern-geezer</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	
	<build>
		<!-- set as source dir, so that you can edit it correctly in netbeans -->
		<sourceDirectory>src/main/js</sourceDirectory>
		<resources>
			<resource>
				<directory>${project.build.sourceDirectory}/bundles</directory>
				<filtering>true</filtering>
				<targetPath>${js.build.outputPath}/bundles</targetPath>
			</resource>
			<resource>
				<directory>src/main/js</directory>
				<targetPath>${js.build.outputPath}</targetPath>
			</resource>
			<resource>
				<directory>${project.basedir}</directory>
				<includes>
					<include>README.md</include>
				</includes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<includes>
					<include>application.properties</include>
				</includes>
				<filtering>true</filtering>
			</testResource>
			<testResource>
				<directory>src/test/resources</directory>
				<excludes>
					<exclude>application.properties</exclude>
				</excludes>
			</testResource>
			<testResource>
				<directory>src/test/webapp</directory>
				<includes>
					<include>**/*</include>
				</includes>
			</testResource>
		</testResources>
		
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>${plugin.license.version}</version>
					<configuration>
						<inceptionYear>${project.inceptionYear}</inceptionYear>
						<organizationName>${project.organization.name}</organizationName>
						<projectName>${project.name}</projectName>
						<force>true</force>
						<licenseFile>${project.basedir}/LICENSE</licenseFile>
						<licenseName>apache_v2</licenseName>
					</configuration>
					<executions>
						<execution>
							<id>update-project-license</id>
							<goals>
								<goal>update-project-license</goal>
							</goals>
							<phase>generate-resources</phase>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>de.conterra.mapapps</groupId>
					<artifactId>mapapps-maven-plugin</artifactId>
					<version>${mapapps.version}</version>
					<configuration>
						<skipDeploy>true</skipDeploy>
						<createApp>false</createApp>
					</configuration>
					<executions>
						<execution>
							<id>build-app-template</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>deployAppTemplate</goal>
							</goals>
							<configuration>
								<templateName>${project.artifactId}</templateName>
								<templateTitle>${project.artifactId}-${project.version}</templateTitle>
								<templateFile>${project.build.directory}/${project.artifactId}-sample-app.zip</templateFile>
								<templateResources>
									<templateResource>
										<directory>${js.build.outputPath}/apps/${default.app.name}</directory>
										<includes>
											<include>**/*</include>
										</includes>
									</templateResource>
								</templateResources>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>de.conterra.jsregistry</groupId>
					<artifactId>ct-jsregistry-maven-plugin</artifactId>
					<version>${ct.jsregistry.version}</version>
					<configuration>
						<sourceDirectory>${js.build.outputPath}</sourceDirectory>
						<outputDirectory>${js.build.outputPath}</outputDirectory>
					</configuration>
					<executions>
						<execution>
							<id>build-jsregistry.properties</id>
							<phase>process-resources</phase>
							<goals>
								<goal>buildPacksProperties</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>${plugin.resources.version}</version>
					<configuration>
						<escapeString>\</escapeString>
						<!-- JavaScript files must be encoded with UTF-8! -->
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-source-plugin</artifactId>
					<version>${plugin.source.version}</version>
				</plugin>
				<plugin>
					<!-- we jar the ct/* js sources so that we have it present for dependency unpack goal in projects -->
					<artifactId>maven-jar-plugin</artifactId>
					<version>${plugin.jar.version}</version>
					<configuration>
						<classesDirectory>${js.build.outputPath}</classesDirectory>
						<includes>
							<include>**/*</include>
						</includes>
						<excludes>
							<exclude>apps/**</exclude>
							<exclude>**/tests/**</exclude>
						</excludes>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-maven-plugin</artifactId>
					<version>${plugin.jetty.version}</version>
					<configuration>
						<httpConnector>
							<port>9090</port>
						</httpConnector>
						<stopPort>9966</stopPort>
						<stopKey>jetty-stop</stopKey>
						<stopWait>60000</stopWait>
						<scanIntervalSeconds>0</scanIntervalSeconds>
						<reload>manual</reload>
						<webXml>${basedir}/src/test/webapp/WEB-INF/web.xml</webXml>
						<useTestScope>true</useTestScope>
						<webAppConfig>
							<contextPath>/</contextPath>
							<baseResource implementation="org.eclipse.jetty.util.resource.ResourceCollection">
								<resourcesAsCSV>${basedir}/src/main,${basedir}/src/test/webapp,${project.build.directory}/${project.artifactId}</resourcesAsCSV>
							</baseResource>
							<!-- include ct-jsregistry-embedded-<version>.jar as web-fragment provider -->
							<webInfIncludeJarPattern>.*/ct-jsregistry-embedded-[^/]*\.jar$</webInfIncludeJarPattern>
						</webAppConfig>
						<systemProperties>
							<systemProperty>
								<!-- set catalina home, so that log files are created in the target directory-->
								<name>catalina.home</name>
								<value>${project.build.directory}</value>
							</systemProperty>
						</systemProperties>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>properties-maven-plugin</artifactId>
					<version>${plugin.properties.version}</version>
				</plugin>
				<plugin>
					<groupId>com.google.code.maven-replacer-plugin</groupId>
					<artifactId>replacer</artifactId>
					<version>${plugin.replacer.version}</version>
					<executions>
						<execution>
							<id>replace some config settings in app.json</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>replace</goal>
							</goals>
							<configuration>
								<basedir>${js.build.outputPath}</basedir>
								<includes>
									<include>**/app.json</include>
								</includes>
								<regex>true</regex>
								<replacements>
									<replacement>
										<!-- remove bundleLocations from app.json -->
										<token>\s*"bundleLocations"\s*:\s*\[\s*"localbundles"\s*,\s*"bundles"\s*\]\s*,\s*</token>
										<value />
									</replacement>
								</replacements>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>de.conterra.maven</groupId>
					<artifactId>setproperties-maven-plugin</artifactId>
					<version>1.0.2</version>
					<executions>
						<execution>
							<goals>
								<goal>setProperties</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<!-- add here properties which are used in plugin configuration resolution -->
						<properties>
							<!-- deployment of map.apps installation -->
							<mapapps.remote.base>${mapapps.remote.base}</mapapps.remote.base>
						</properties>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-dependency-plugin</artifactId>
					<!-- this unpacks the org css/less files for own bundles -->
					<executions>
						<execution>
							<id>unpack-themes-src</id>
							<phase>generate-sources</phase>
							<goals>
								<goal>unpack</goal>
							</goals>
							<configuration>
								<stripVersion>true</stripVersion>
								<artifactItems>
									<artifactItem>
										<!-- unpack mapapps sources -->
										<groupId>de.conterra.mapapps</groupId>
										<artifactId>ct-mapapps-js-api</artifactId>
										<version>${mapapps.version}</version>
										<classifier>src</classifier>
										<outputDirectory>${project.build.directory}/unpacked</outputDirectory>
										<includes>bundles/base/themes/themes/**,bundles/base/themes/themes/common/**,bundles/base/templates/templates/common/**</includes>
									</artifactItem>
								</artifactItems>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>${plugin.assembly.version}</version>
					<configuration>
						<descriptors>
							<descriptor>src/main/config/assembly.xml</descriptor>
						</descriptors>
						<finalName>${project.artifactId}-bundle</finalName>
						<appendAssemblyId>false</appendAssemblyId>
					</configuration>
					<executions>
						<execution>
							<id>make-zip</id>
							<phase>package</phase>
							<goals>
								<goal>single</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-release-plugin</artifactId>
					<version>${plugin.release.version}</version>
					<configuration>
						<tagNameFormat>@{project.version}</tagNameFormat>
						<preparationGoals>clean</preparationGoals>
						<releaseProfiles>compress,github-release</releaseProfiles>
						<autoVersionSubmodules>true</autoVersionSubmodules>
						<!-- for git release plugin-->
						<arguments>-Dusername=${scm.username} -Dpassword=${scm.password}</arguments>
						<username>${scm.username}</username>
						<password>${scm.password}</password>
					</configuration>
				</plugin>
				<plugin>
					<groupId>de.jutzig</groupId>
					<artifactId>github-release-plugin</artifactId>
					<version>${plugin.githubrelease.version}</version>
				</plugin>
				<plugin>
					<artifactId>maven-scm-plugin</artifactId>
					<version>${plugin.scm.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>de.conterra.maven</groupId>
				<artifactId>setproperties-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>de.conterra.jsregistry</groupId>
				<artifactId>ct-jsregistry-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>replacer</artifactId>
			</plugin>
			<plugin>
				<groupId>de.conterra.mapapps</groupId>
				<artifactId>mapapps-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-release-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>de.jutzig</groupId>
				<artifactId>github-release-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	
	<scm>
		<connection>scm:git:https://github.com/conterra/mapapps-url-query.git</connection>
		<developerConnection>scm:git:https://github.com/conterra/mapapps-url-query.git</developerConnection>
		<url>https://github.com/conterra/mapapps-url-query</url>
		<tag>1.0.0</tag>
	</scm>
	
	<distributionManagement>
		<repository>
			<id>ct-dist-releases-file</id>
			<name>repository for sdi.suite releases</name>
			<url>${release.deployment.url}</url>
		</repository>
		<snapshotRepository>
			<id>ct-dist-snapshots-file</id>
			<name>repository for sdi.suite snapshots</name>
			<url>${snapshot.deployment.url}</url>
		</snapshotRepository>
	</distributionManagement>
	
	<profiles>
		<profile>
			<id>env-dev</id>
			<!-- This is the development profile, per default it points to a build.properties
		file in the user home, but this can be changed localy by specifiying the
		property local.configfile with its own string.
			-->
			<activation>
				<property>
					<name>env</name>
					<value>dev</value>
				</property>
			</activation>
			<properties>
				<local.configfile>${basedir}/build.properties</local.configfile>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>properties-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>initialize</phase>
								<goals>
									<goal>read-project-properties</goal>
								</goals>
								<configuration>
									<files>
										<file>${local.configfile}</file>
									</files>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- this is the optimization profile, it executes the dojo build to compress, minimize and inline templates in dojo, esri and ct javascript sources -->
			<!-- it must be explicitly activated by -P compress flag, also at release time -->
			<id>compress</id>
			<build>
				<plugins>
					<plugin>
						<groupId>de.conterra.jsregistry</groupId>
						<artifactId>ct-jsregistry-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>calculate js dependencies</id>
								<goals>
									<goal>calculateDependencies</goal>
								</goals>
							</execution>
							<execution>
								<id>optimize js</id>
								<goals>
									<goal>optimizeJS</goal>
								</goals>
								<configuration>
									<hasFeatures>
										<ct-debug>false</ct-debug>
									</hasFeatures>
									<jsFiles>
										<excludes>
											<exclude>apps/**</exclude>
											<exclude>**/tests/**</exclude>
										</excludes>
									</jsFiles>
								</configuration>
							</execution>
							<execution>
								<id>optimize CSS</id>
								<goals>
									<goal>optimizeCSS</goal>
								</goals>
								<phase>compile</phase>
								<configuration>
									<cssFiles>
										<includes>
											<include>bundles/*/*/*.css</include>
										</includes>
										<excludes>
											<exclude>**/themeSettings.css</exclude>
										</excludes>
									</cssFiles>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>upload</id>
			<build>
				<plugins>
					<plugin>
						<groupId>de.conterra.mapapps</groupId>
						<artifactId>mapapps-maven-plugin</artifactId>
						<configuration>
							<!-- enable deploy options -->
							<skipDeploy>true</skipDeploy>
							<deployAsApp>true</deployAsApp>
							<appEditorState>PUBLISHED</appEditorState>
							<updateAppInfoIfExists>true</updateAppInfoIfExists>
							<serverResourcesEndpoint>${mapapps.remote.base}/resources</serverResourcesEndpoint>
							<username>${user}</username>
							<password>${password}</password>
						</configuration>
					</plugin>
					<plugin>
						<groupId>de.conterra.jsregistry</groupId>
						<artifactId>ct-jsregistry-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>deploy bundles</id>
								<goals>
									<goal>deployJSPackage</goal>
								</goals>
								<configuration>
									<useChunkedRequestEncoding>false</useChunkedRequestEncoding>
									<registryEndpoint>${mapapps.remote.base}/resources/jsregistry</registryEndpoint>
									<username>${user}</username>
									<password>${password}</password>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>github-release</id>
			<build>
				<plugins>
					<plugin>
						<groupId>de.jutzig</groupId>
						<artifactId>github-release-plugin</artifactId>
						<executions>
							<execution>
								<id>github-upload</id>
								<phase>deploy</phase>
								<goals>
									<goal>release</goal>
								</goals>
								<configuration>
									<tag>${project.version}</tag>
									<artifact>${project.build.directory}/${project.artifactId}-${project.version}.jar</artifact>
									<fileSets>
										<fileSet>
											<directory>${project.build.directory}</directory>
											<includes>
												<include>${project.artifactId}-bundle.zip</include>
												<include>${project.artifactId}-sample-app.zip</include>
												<!--<include>${project.artifactId}*.tar.gz</include>-->
												<include>${project.artifactId}*.zip</include>
											</includes>
										</fileSet>
									</fileSets>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>write-release-versions</id>
			<properties>
				<replace.source.version>${project.version}</replace.source.version>
				<replace.target.version>${project.version}</replace.target.version>
			</properties>
			<build>
				<plugins>
					<plugin>
						<!-- ensure correct version in the manifest.json files-->
						<groupId>com.google.code.maven-replacer-plugin</groupId>
						<artifactId>replacer</artifactId>
						<executions>
							<!-- set release version -->
							<execution>
								<id>Set Versions from ${replace.source.version} to ${replace.target.version}</id>
								<phase>validate</phase>
								<goals>
									<goal>replace</goal>
								</goals>
								<configuration>
									<basedir>${basedir}</basedir>
									<includes>
										<include>src/main/js/**/manifest.json</include>
										<include>src/main/js/**/package.json</include>
									</includes>
									<excludes>
										<exclude>src/main/js/**/tests/**</exclude>
									</excludes>
									<regex>false</regex>
									<replacements>
										<replacement>
											<token>"${replace.source.version}"</token>
											<value>"${replace.target.version}"</value>
										</replacement>
										<replacement>
											<token>"~${replace.source.version}"</token>
											<value>"~${replace.target.version}"</value>
										</replacement>
									</replacements>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>commit-release-versions</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-scm-plugin</artifactId>
						<executions>
							<execution>
								<phase>validate</phase>
								<goals>
									<goal>checkin</goal>
								</goals>
								<configuration>
									<message>[update-bundle-package-versions] from ${replace.source.version} to ${replace.target.version}</message>
									<basedir>${basedir}/src/main/js</basedir>
									<pushChanges>${scm.push}</pushChanges>
									<username>${scm.username}</username>
									<password>${scm.password}</password>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
